package org.gciatto.kt.math

import kotlin.test.Test

class TestDecimals {

    @Test
    fun testCreation() {
        assertReprEquals("0", BigDecimal.ZERO)
        assertReprEquals("1", BigDecimal.ONE)
        assertReprEquals("2", BigDecimal.TWO)
        assertReprEquals("10", BigDecimal.TEN)
        assertReprEquals("0.5", BigDecimal.ONE_HALF)
        assertReprEquals("0.1", BigDecimal.ONE_TENTH)
        assertReprEquals("-1", -BigDecimal.ONE)
        assertReprEquals("-2", -BigDecimal.TWO)
        assertReprEquals("-10", -BigDecimal.TEN)
        assertReprEquals("-0.5", -BigDecimal.ONE_HALF)
        assertReprEquals("-0.1", -BigDecimal.ONE_TENTH)

        assertReprEquals(DOUBLE_MAX_VALUE_REPR, BigDecimal.of(Double.MAX_VALUE).toPlainString())
        assertReprEquals(DOUBLE_MIN_VALUE_REPR, BigDecimal.of(Double.MIN_VALUE).toPlainString())
        assertReprEquals(FLOAT_MAX_VALUE_REPR, BigDecimal.of(Float.MAX_VALUE).toPlainString())
        assertReprEquals(FLOAT_MIN_VALUE_REPR, BigDecimal.of(Float.MIN_VALUE).toPlainString())

        assertReprEquals(PI_REPR, BigDecimal.PI)

        assertReprEquals(E_REPR, BigDecimal.E)

        assertBigDecimalsAreEquals(BigDecimal.ZERO, BigDecimal.of(0))
        assertBigDecimalsAreEquals(BigDecimal.ONE, BigDecimal.of(1))
        assertBigDecimalsAreEquals(BigDecimal.TWO, BigDecimal.of(2))
        assertBigDecimalsAreEquals(BigDecimal.TEN, BigDecimal.of(10))
        assertBigDecimalsAreEquals(BigDecimal.ONE_HALF, BigDecimal.of(1) / BigDecimal.of(2))
        assertBigDecimalsAreEquals(BigDecimal.ONE_TENTH, BigDecimal.of(1) / BigDecimal.of(10))
        assertBigDecimalsAreEquals(-BigDecimal.ONE, BigDecimal.of(-1))
        assertBigDecimalsAreEquals(-BigDecimal.TWO, BigDecimal.of(-2))
        assertBigDecimalsAreEquals(-BigDecimal.TEN, BigDecimal.of(-10))
        assertBigDecimalsAreEquals(-BigDecimal.ONE_HALF, BigDecimal.of(-1) / BigDecimal.of(2))
        assertBigDecimalsAreEquals(-BigDecimal.ONE_TENTH, BigDecimal.of(-1) / BigDecimal.of(10))

        assertBigDecimalsAreEquals(BigDecimal.ZERO, BigDecimal.of(0.0))
        assertBigDecimalsAreEquals(BigDecimal.ONE, BigDecimal.of(1.0))
        assertBigDecimalsAreEquals(BigDecimal.TWO, BigDecimal.of(2.0))
        assertBigDecimalsAreEquals(BigDecimal.TEN, BigDecimal.of(10.0))
        assertBigDecimalsAreEquals(BigDecimal.ONE_HALF, BigDecimal.of(0.5))
        assertBigDecimalsAreEquals(BigDecimal.ONE_TENTH, BigDecimal.of("0.1"))
        assertBigDecimalsAreEquals(-BigDecimal.ONE, BigDecimal.of(-1.0))
        assertBigDecimalsAreEquals(-BigDecimal.TWO, BigDecimal.of(-2.0))
        assertBigDecimalsAreEquals(-BigDecimal.TEN, BigDecimal.of(-10.0))
        assertBigDecimalsAreEquals(-BigDecimal.ONE_HALF, BigDecimal.of(-0.5))
        assertBigDecimalsAreEquals(-BigDecimal.ONE_TENTH, BigDecimal.of("-0.1"))
    }

    @Test
    fun testSum() {
        assertBigDecimalsAreEquals(BigDecimal.of(-1 + 1), BigDecimal.of(-1) + BigDecimal.ONE)
        assertBigDecimalsAreEquals(BigDecimal.of(0 + 1), BigDecimal.of(0) + BigDecimal.ONE)
        assertBigDecimalsAreEquals(BigDecimal.of(1 + 1), BigDecimal.of(1) + BigDecimal.ONE)

        assertBigDecimalsAreEquals(BigDecimal.of(-1 + 2), BigDecimal.of(-1) + BigDecimal.TWO)
        assertBigDecimalsAreEquals(BigDecimal.of(0 + 2), BigDecimal.of(0) + BigDecimal.TWO)
        assertBigDecimalsAreEquals(BigDecimal.of(1 + 2), BigDecimal.of(1) + BigDecimal.TWO)

        assertBigDecimalsAreEquals(BigDecimal.of(-1 + 10), BigDecimal.of(-1) + BigDecimal.TEN)
        assertBigDecimalsAreEquals(BigDecimal.of(0 + 10), BigDecimal.of(0) + BigDecimal.TEN)
        assertBigDecimalsAreEquals(BigDecimal.of(1 + 10), BigDecimal.of(1) + BigDecimal.TEN)

        assertReprEquals("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI + BigDecimal.ZERO)
        assertReprEquals("4.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI + BigDecimal.ONE)
        assertReprEquals("5.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI + BigDecimal.TWO)
        assertReprEquals("13.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI + BigDecimal.TEN)
        assertReprEquals("3.641592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI + BigDecimal.ONE_HALF)
        assertReprEquals("3.241592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI + BigDecimal.ONE_TENTH)

        assertReprEquals("2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E + BigDecimal.ZERO)
        assertReprEquals("3.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E + BigDecimal.ONE)
        assertReprEquals("4.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E + BigDecimal.TWO)
        assertReprEquals("12.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E + BigDecimal.TEN)
        assertReprEquals("3.218281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E + BigDecimal.ONE_HALF)
        assertReprEquals("2.818281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E + BigDecimal.ONE_TENTH)
    }

    @Test
    fun testSub() {
        assertBigDecimalsAreEquals(BigDecimal.of(-1 - 1), BigDecimal.of(-1) - BigDecimal.ONE)
        assertBigDecimalsAreEquals(BigDecimal.of(0 - 1), BigDecimal.of(0) - BigDecimal.ONE)
        assertBigDecimalsAreEquals(BigDecimal.of(1 - 1), BigDecimal.of(1) - BigDecimal.ONE)

        assertBigDecimalsAreEquals(BigDecimal.of(-1 - 2), BigDecimal.of(-1) - BigDecimal.TWO)
        assertBigDecimalsAreEquals(BigDecimal.of(0 - 2), BigDecimal.of(0) - BigDecimal.TWO)
        assertBigDecimalsAreEquals(BigDecimal.of(1 - 2), BigDecimal.of(1) - BigDecimal.TWO)

        assertBigDecimalsAreEquals(BigDecimal.of(-1 - 10), BigDecimal.of(-1) - BigDecimal.TEN)
        assertBigDecimalsAreEquals(BigDecimal.of(0 - 10), BigDecimal.of(0) - BigDecimal.TEN)
        assertBigDecimalsAreEquals(BigDecimal.of(1 - 10), BigDecimal.of(1) - BigDecimal.TEN)

        assertReprEquals("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI - BigDecimal.ZERO)
        assertReprEquals("2.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI - BigDecimal.ONE)
        assertReprEquals("1.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI - BigDecimal.TWO)
        assertReprEquals("-6.858407346410206761537356616720497115802830600624894179025055407692183593713791001371965174657882932017851913486717693352906155390449417768274640591871518882549715897298061478894440355377051045069618035571189024334066553871524351766213216834728798090854352",
            BigDecimal.PI - BigDecimal.TEN)
        assertReprEquals("2.641592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI - BigDecimal.ONE_HALF)
        assertReprEquals("3.041592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648",
            BigDecimal.PI - BigDecimal.ONE_TENTH)

        assertReprEquals("2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E - BigDecimal.ZERO)
        assertReprEquals("1.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E - BigDecimal.ONE)
        assertReprEquals("0.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E - BigDecimal.TWO)
        assertReprEquals("-7.281718171540954764639712528647337502242752906300040425033032372275923369646452405428617821474833572572533608067996940078182586403370956427099665704739404369261867671372056509236766170119246804748980988426165812069297845910850065115832490755238539331917736",
            BigDecimal.E - BigDecimal.TEN)
        assertReprEquals("2.218281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E - BigDecimal.ONE_HALF)
        assertReprEquals("2.618281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264",
            BigDecimal.E - BigDecimal.ONE_TENTH)

        log { "Notice that Double.MIN_VALUE=${Double.MIN_VALUE}" }
        assertReprEquals(BigDecimal.of(DOUBLE_MIN_VALUE_REPR) - BigDecimal.ONE,
            BigDecimal.of(Double.MIN_VALUE) - BigDecimal.ONE)
    }

    @Test
    fun testDecimalParsing() {
        assertBigDecimalsAreEquals(BigDecimal.ZERO, BigDecimal.of("0.0"))
        assertBigDecimalsAreEquals(BigDecimal.ONE, BigDecimal.of("1.0"))
        assertBigDecimalsAreEquals(BigDecimal.TWO, BigDecimal.of("2.0"))
        assertBigDecimalsAreEquals(BigDecimal.TEN, BigDecimal.of("10.0"))
        assertBigDecimalsAreEquals(BigDecimal.ONE_HALF, BigDecimal.of("0.5"))
        assertBigDecimalsAreEquals(BigDecimal.ONE_TENTH, BigDecimal.of("0.1"))
        assertBigDecimalsAreEquals(-BigDecimal.ONE, BigDecimal.of("-1.0"))
        assertBigDecimalsAreEquals(-BigDecimal.TWO, BigDecimal.of("-2.0"))
        assertBigDecimalsAreEquals(-BigDecimal.TEN, BigDecimal.of("-10.0"))
        assertBigDecimalsAreEquals(-BigDecimal.ONE_HALF, BigDecimal.of("-0.5"))
        assertBigDecimalsAreEquals(-BigDecimal.ONE_TENTH, BigDecimal.of("-0.1"))

        assertBigDecimalsAreEquals(BigDecimal.PI, BigDecimal.of("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648"))
        assertBigDecimalsAreEquals(-BigDecimal.PI, BigDecimal.of("-3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648"))
        assertBigDecimalsAreEquals(BigDecimal.E, BigDecimal.of("2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264"))
        assertBigDecimalsAreEquals(-BigDecimal.E, BigDecimal.of("-2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264"))

        assertBigDecimalsAreEquals(BigDecimal.of(1, 1000), BigDecimal.of("0." + (0 until 999).map { "0" }.joinToString("") +  "1"))
    }

    @Test
    fun testSqrt() {
        assertBigDecimalsAreEquals(BigDecimal.ZERO, BigDecimal.ZERO.sqrt())
        assertBigDecimalsAreEquals(BigDecimal.ONE, BigDecimal.ONE.sqrt())
        assertBigDecimalsAreEquals(BigDecimal.of(2), BigDecimal.of(4).sqrt())
        assertBigDecimalsAreEquals(BigDecimal.of("1.1"), BigDecimal.of("1.21").sqrt())
    }

}